{"version":3,"sources":["api/server.js","features/api/apiSlice.js","features/notifications/notificationsSlice.js","app/Navbar.js","features/users/usersSlice.js","features/notifications/NotificationsList.js","features/posts/AddPostForm.js","features/posts/EditPostForm.js","components/Spinner.js","features/posts/PostAuthor.js","features/posts/TimeAgo.js","features/posts/ReactionButtons.js","features/posts/PostsList.js","features/posts/SinglePostPage.js","features/users/UserPage.js","features/users/UsersList.js","App.js","api/client.js","features/posts/postsSlice.js","app/store.js","index.js"],"names":["seedDate","apiSlice","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","builder","getPosts","query","providesTags","result","arguments","length","undefined","concat","_toConsumableArray","map","_ref","type","id","getPost","postId","error","arg","addNewPost","mutation","initialPost","url","method","body","invalidatesTags","editPost","post","addReaction","_ref2","reaction","onQueryStarted","_ref3","_ref4","_asyncToGenerator","_regeneratorRuntime","mark","_callee","dispatch","queryFulfilled","patchResult","wrap","_context","prev","next","util","updateQueryData","draft","find","reactions","t0","undo","stop","useGetPostsQuery","useGetPostQuery","useAddNewPostMutation","useEditPostMutation","useAddReactionMutation","ARTIFICIAL_DELAY_MS","rng","seedrandom","randomSeedString","localStorage","getItem","getRandomInt","min","max","Math","ceil","floor","Date","toISOString","setItem","setRandom","faker","seed","getTime","user","randomFromArray","array","db","factory","primaryKey","nanoid","firstName","String","lastName","name","username","posts","manyOf","title","date","content","oneOf","comments","comment","text","thumbsUp","Number","hooray","heart","rocket","eyes","createUserData","internet","userName","i","author","create","j","newPost","lorem","words","recent","paragraphs","currentSocket","serializePost","_objectSpread","handlers","rest","get","req","res","ctx","getAll","delay","json","data","status","findFirst","where","equals","params","patch","_req$body","_objectWithoutProperties","_excluded","updatedPost","update","_defineProperty","notifications","generateRandomNotifications","worker","setupWorker","apply","socketServer","MockSocketServer","sendRandomNotifications","socket","since","obj","send","JSON","stringify","sendMessage","payload","on","message","parse","notificationTemplates","numNotifications","pastDate","now","parseISO","valueOf","setMinutes","getMinutes","Array","template","between","notificationsReceived","createAction","extendedApi","injectEndpoints","getNotifications","onCacheEntryAdded","updateCachedData","cacheDataLoaded","cacheEntryRemoved","ws","listener","WebSocket","event","push","sort","a","b","localeCompare","addEventListener","close","useGetNotificationsQuery","emptyNotifications","selectNotificationsResult","select","selectNotificationsData","createSelector","notificationsResult","_notificationsResult$","fetchNotificationsWebsocket","getState","_latestNotification$d","allNotifications","latestNotification","_slicedToArray","latestTimestamp","notificationsAdapter","createEntityAdapter","matchNotificationsReceived","isAnyOf","matchFulfilled","notificationsSlice","createSlice","initialState","getInitialState","reducers","allNotificationsRead","state","action","Object","values","entities","forEach","notification","read","extraReducers","addMatcher","notificationsMetadata","isNew","upsertMany","_notificationsAdapter","getSelectors","selectNotificationsMetadata","selectAll","selectMetadataEntities","selectEntities","actions","Navbar","useDispatch","unreadNotificationsBadge","numUnreadNotifications","useSelector","filter","n","_jsx","className","children","_jsxs","Link","to","onClick","usersAdapter","extendedApiSlice","getUsers","transformResponse","responseData","setAll","selectUsersResult","useGetUsersQuery","selectUsersData","usersResult","_usersAdapter$getSele","_selectUsersData","selectAllUsers","selectUserById","selectById","NotificationsList","_useGetNotificationsQ2","users","useLayoutEffect","renderedNotifications","timeAgo","formatDistanceToNow","metadata","notificationClassname","classnames","new","AddPostForm","_useState","useState","_useState2","setTitle","_useState3","_useState4","setContent","_useState5","_useState6","userId","setUserId","_useAddNewPostMutatio","_useAddNewPostMutatio2","isLoading","onSavePostClicked","canSave","unwrap","console","every","Boolean","usersOptions","value","htmlFor","placeholder","onChange","e","target","disabled","EditPostForm","match","_useEditPostMutation","updatePost","history","useHistory","Spinner","_ref$text","_ref$size","size","header","style","height","width","PostAuthor","TimeAgo","timestamp","timePeriod","reactionEmoji","ReactionButtons","_useAddReactionMutati","reactionButtons","entries","reactionName","emoji","PostExcerpt","substring","PostsList","_useGetPostsQuery","_useGetPostsQuery$dat","isSuccess","isFetching","isError","refetch","sortedPosts","useMemo","slice","renderedPosts","containerClassname","classNames","toString","SinglePostPage","_useGetPostQuery","UserPage","selectPostsForUser","emptyArray","_data$filter","postTitles","selectFromResult","postsForUser","UsersList","renderedUsers","App","Router","Switch","Route","exact","path","render","React","Fragment","component","Redirect","client","_x","_client","endpoint","customConfig","headers","config","response","_args","window","fetch","sent","ok","abrupt","Error","statusText","Promise","reject","postsAdapter","sortComparer","fetchPosts","createAsyncThunk","_callee2","_context2","postsSlice","postAdded","reducer","prepare","reactionAdded","_action$payload","existingPost","postUpdated","_action$payload2","addCase","pending","fulfilled","rejected","addOne","_postsSlice$actions","_postsAdapter$getSele","selectAllPosts","configureStore","selectIds","postsReducer","notificationsReducer","middleware","getDefaultMiddleware","devTools","_main","start","onUnhandledRequest","store","initiate","ReactDOM","StrictMode","Provider","document","getElementById","main"],"mappings":"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","file":"static/js/main.ae51f91c.chunk.js","sourcesContent":["import { rest, setupWorker } from 'msw'\nimport { factory, oneOf, manyOf, primaryKey } from '@mswjs/data'\nimport { nanoid } from '@reduxjs/toolkit'\nimport faker from 'faker'\nimport seedrandom from 'seedrandom'\nimport { Server as MockSocketServer } from 'mock-socket'\nimport { setRandom } from 'txtgen'\n\nimport { parseISO } from 'date-fns'\n\nconst NUM_USERS = 3\nconst POSTS_PER_USER = 3\nconst RECENT_NOTIFICATIONS_DAYS = 7\n\n// Add an extra delay to all endpoints, so loading spinners show up.\nconst ARTIFICIAL_DELAY_MS = 2000\n\n/* RNG setup */\n\n// Set up a seeded random number generator, so that we get\n// a consistent set of users / entries each time the page loads.\n// This can be reset by deleting this localStorage value,\n// or turned off by setting `useSeededRNG` to false.\nlet useSeededRNG = true\n\nlet rng = seedrandom()\n\nif (useSeededRNG) {\n  let randomSeedString = localStorage.getItem('randomTimestampSeed')\n  let seedDate\n\n  if (randomSeedString) {\n    seedDate = new Date(randomSeedString)\n  } else {\n    seedDate = new Date()\n    randomSeedString = seedDate.toISOString()\n    localStorage.setItem('randomTimestampSeed', randomSeedString)\n  }\n\n  rng = seedrandom(randomSeedString)\n  setRandom(rng)\n  faker.seed(seedDate.getTime())\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min)\n  max = Math.floor(max)\n  return Math.floor(rng() * (max - min + 1)) + min\n}\n\nconst randomFromArray = (array) => {\n  const index = getRandomInt(0, array.length - 1)\n  return array[index]\n}\n\n/* MSW Data Model Setup */\n\nexport const db = factory({\n  user: {\n    id: primaryKey(nanoid),\n    firstName: String,\n    lastName: String,\n    name: String,\n    username: String,\n    posts: manyOf('post'),\n  },\n  post: {\n    id: primaryKey(nanoid),\n    title: String,\n    date: String,\n    content: String,\n    reactions: oneOf('reaction'),\n    comments: manyOf('comment'),\n    user: oneOf('user'),\n  },\n  comment: {\n    id: primaryKey(String),\n    date: String,\n    text: String,\n    post: oneOf('post'),\n  },\n  reaction: {\n    id: primaryKey(nanoid),\n    thumbsUp: Number,\n    hooray: Number,\n    heart: Number,\n    rocket: Number,\n    eyes: Number,\n    post: oneOf('post'),\n  },\n})\n\nconst createUserData = () => {\n  const firstName = faker.name.firstName()\n  const lastName = faker.name.lastName()\n\n  return {\n    firstName,\n    lastName,\n    name: `${firstName} ${lastName}`,\n    username: faker.internet.userName(),\n  }\n}\n\nconst createPostData = (user) => {\n  return {\n    title: faker.lorem.words(),\n    date: faker.date.recent(RECENT_NOTIFICATIONS_DAYS).toISOString(),\n    user,\n    content: faker.lorem.paragraphs(),\n    reactions: db.reaction.create(),\n  }\n}\n\n// Create an initial set of users and posts\nfor (let i = 0; i < NUM_USERS; i++) {\n  const author = db.user.create(createUserData())\n\n  for (let j = 0; j < POSTS_PER_USER; j++) {\n    const newPost = createPostData(author)\n    db.post.create(newPost)\n  }\n}\n\nconst serializePost = (post) => ({\n  ...post,\n  user: post.user.id,\n})\n\n/* MSW REST API Handlers */\n\nexport const handlers = [\n  rest.get('/fakeApi/posts', function (req, res, ctx) {\n    const posts = db.post.getAll().map(serializePost)\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(posts))\n  }),\n  rest.post('/fakeApi/posts', function (req, res, ctx) {\n    const data = req.body\n\n    if (data.content === 'error') {\n      return res(\n        ctx.delay(ARTIFICIAL_DELAY_MS),\n        ctx.status(500),\n        ctx.json('Server error saving this post!')\n      )\n    }\n\n    data.date = new Date().toISOString()\n\n    const user = db.user.findFirst({ where: { id: { equals: data.user } } })\n    data.user = user\n    data.reactions = db.reaction.create()\n\n    const post = db.post.create(data)\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(post)))\n  }),\n  rest.get('/fakeApi/posts/:postId', function (req, res, ctx) {\n    const post = db.post.findFirst({\n      where: { id: { equals: req.params.postId } },\n    })\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(post)))\n  }),\n  rest.patch('/fakeApi/posts/:postId', (req, res, ctx) => {\n    const { id, ...data } = req.body\n    const updatedPost = db.post.update({\n      where: { id: { equals: req.params.postId } },\n      data,\n    })\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json(serializePost(updatedPost))\n    )\n  }),\n\n  rest.get('/fakeApi/posts/:postId/comments', (req, res, ctx) => {\n    const post = db.post.findFirst({\n      where: { id: { equals: req.params.postId } },\n    })\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json({ comments: post.comments })\n    )\n  }),\n\n  rest.post('/fakeApi/posts/:postId/reactions', (req, res, ctx) => {\n    const postId = req.params.postId\n    const reaction = req.body.reaction\n    const post = db.post.findFirst({\n      where: { id: { equals: postId } },\n    })\n\n    const updatedPost = db.post.update({\n      where: { id: { equals: postId } },\n      data: {\n        reactions: {\n          ...post.reactions,\n          [reaction]: (post.reactions[reaction] += 1),\n        },\n      },\n    })\n\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json(serializePost(updatedPost))\n    )\n  }),\n  rest.get('/fakeApi/notifications', (req, res, ctx) => {\n    const numNotifications = getRandomInt(1, 5)\n\n    let notifications = generateRandomNotifications(\n      undefined,\n      numNotifications,\n      db\n    )\n\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(notifications))\n  }),\n  rest.get('/fakeApi/users', (req, res, ctx) => {\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(db.user.getAll()))\n  }),\n]\n\nexport const worker = setupWorker(...handlers)\n// worker.printHandlers() // Optional: nice for debugging to see all available route handlers that will be intercepted\n\n/* Mock Websocket Setup */\n\nconst socketServer = new MockSocketServer('ws://localhost')\n\nlet currentSocket\n\nconst sendMessage = (socket, obj) => {\n  socket.send(JSON.stringify(obj))\n}\n\n// Allow our UI to fake the server pushing out some notifications over the websocket,\n// as if other users were interacting with the system.\nconst sendRandomNotifications = (socket, since) => {\n  const numNotifications = getRandomInt(1, 5)\n\n  const notifications = generateRandomNotifications(since, numNotifications, db)\n\n  sendMessage(socket, { type: 'notifications', payload: notifications })\n}\n\nexport const forceGenerateNotifications = (since) => {\n  sendRandomNotifications(currentSocket, since)\n}\n\nsocketServer.on('connection', (socket) => {\n  currentSocket = socket\n\n  socket.on('message', (data) => {\n    const message = JSON.parse(data)\n\n    switch (message.type) {\n      case 'notifications': {\n        const since = message.payload\n        sendRandomNotifications(socket, since)\n        break\n      }\n      default:\n        break\n    }\n  })\n})\n\n/* Random Notifications Generation */\n\nconst notificationTemplates = [\n  'poked you',\n  'says hi!',\n  `is glad we're friends`,\n  'sent you a gift',\n]\n\nfunction generateRandomNotifications(since, numNotifications, db) {\n  const now = new Date()\n  let pastDate\n\n  if (since) {\n    pastDate = parseISO(since)\n  } else {\n    pastDate = new Date(now.valueOf())\n    pastDate.setMinutes(pastDate.getMinutes() - 15)\n  }\n\n  // Create N random notifications. We won't bother saving these\n  // in the DB - just generate a new batch and return them.\n  const notifications = [...Array(numNotifications)].map(() => {\n    const user = randomFromArray(db.user.getAll())\n    const template = randomFromArray(notificationTemplates)\n    return {\n      id: nanoid(),\n      date: faker.date.between(pastDate, now).toISOString(),\n      message: template,\n      user: user.id,\n    }\n  })\n\n  return notifications\n}\n","import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\r\n\r\nexport const apiSlice = createApi({\r\n    reducerPath: \"api\",\r\n    baseQuery: fetchBaseQuery({baseUrl: \"/fakeApi\"}),\r\n    tagTypes: [\"Post\"],\r\n    endpoints: builder => ({\r\n        getPosts: builder.query({\r\n            query: () => \"/posts\",\r\n            // providesTags: [\"Post\"]\r\n            providesTags: (result = [], error, arg) => [\r\n                \"Post\",\r\n                ...result.map(({ id }) => ({ type: \"Post\", id }))\r\n            ]\r\n        }),\r\n        getPost: builder.query({\r\n            query: postId => `/posts/${postId}`,\r\n            providesTags: (result, error, arg) => [{ type: \"Post\", id: arg }]\r\n        }),\r\n        addNewPost: builder.mutation({\r\n            query: initialPost => ({\r\n                url: \"/posts\",\r\n                method: \"POST\",\r\n                body: initialPost\r\n            }),\r\n            invalidatesTags: [\"Post\"]\r\n        }),\r\n        editPost: builder.mutation({\r\n            query: post => ({\r\n                url: `/posts/${post.id}`,\r\n                method: \"PATCH\",\r\n                body: post\r\n            }),\r\n            invalidatesTags: (result, error, arg) => [{ type: \"Post\", id: arg.id }]\r\n        }),\r\n        // getUsers: builder.query({\r\n        //     query: () => \"/users\"\r\n        // })\r\n        addReaction: builder.mutation({\r\n            query: ({ postId, reaction }) => ({\r\n                url: `posts/${postId}/reactions`,\r\n                method: \"POST\",\r\n                body: { reaction }\r\n            }),\r\n            // invalidatesTags: (result, error, arg) => [\r\n            //     { type: \"Post\", id: arg.postId }\r\n            // ]\r\n            async onQueryStarted({ postId, reaction }, { dispatch, queryFulfilled }) {\r\n                const patchResult = dispatch(\r\n                    apiSlice.util.updateQueryData(\"getPosts\", undefined, draft => {\r\n                        const post = draft.find(post => post.id === postId)\r\n                        if (post) {\r\n                            post.reactions[reaction]++\r\n                        }\r\n                    })\r\n                )\r\n                try {\r\n                    await queryFulfilled\r\n                } catch {\r\n                    patchResult.undo()\r\n                }\r\n            }\r\n        })\r\n    })\r\n})\r\n\r\nexport const { \r\n    useGetPostsQuery, \r\n    useGetPostQuery, \r\n    useAddNewPostMutation, \r\n    useEditPostMutation, \r\n    useAddReactionMutation \r\n} = apiSlice","import { createSlice, createEntityAdapter, createSelector, createAction, isAnyOf } from \"@reduxjs/toolkit\";\r\n\r\n//import { client } from \"../../api/client\";\r\nimport { apiSlice } from \"../api/apiSlice\";\r\nimport { forceGenerateNotifications } from '../../api/server'\r\n\r\nconst notificationsReceived = createAction(\r\n    \"notifications/notificationsReceived\"\r\n)\r\n\r\nexport const extendedApi = apiSlice.injectEndpoints({\r\n    endpoints: builder => ({\r\n        getNotifications: builder.query({\r\n            query: () => \"/notifications\",\r\n            async onCacheEntryAdded(\r\n                arg,\r\n                { updateCachedData, cacheDataLoaded, cacheEntryRemoved, dispatch }\r\n            ) {\r\n                const ws = new WebSocket(\"ws://localhost\")\r\n                try {\r\n                    await cacheDataLoaded\r\n                    const listener = event => {\r\n                        const message = JSON.parse(event.data)\r\n                        switch (message.type) {\r\n                            case \"notifications\": {\r\n                                updateCachedData(draft => {\r\n                                    draft.push(...message.payload)\r\n                                    draft.sort((a, b) => b.date.localeCompare(a.date))\r\n                                })\r\n                                dispatch(notificationsReceived(message.payload))\r\n                                break\r\n                            }\r\n                            default:\r\n                                break\r\n                        }\r\n                    }\r\n\r\n                    ws.addEventListener(\"message\", listener)\r\n                } catch {\r\n                    // no-op in case `cacheEntryRemoved` resolves before `cacheDataLoaded`,\r\n                    // in which case `cacheDataLoaded` will throw\r\n                }\r\n                await cacheEntryRemoved\r\n                ws.close()\r\n            }\r\n        })\r\n    })\r\n})\r\n\r\nexport const { useGetNotificationsQuery } = extendedApi\r\n\r\nconst emptyNotifications = []\r\n\r\nexport const selectNotificationsResult = extendedApi.endpoints.getNotifications.select()\r\n\r\nconst selectNotificationsData = createSelector(\r\n    selectNotificationsResult,\r\n    notificationsResult => notificationsResult.data ?? emptyNotifications\r\n)\r\n\r\nexport const fetchNotificationsWebsocket = () => (dispatch, getState) => {\r\n    const allNotifications = selectNotificationsData(getState())\r\n    const [latestNotification] = allNotifications\r\n    const latestTimestamp = latestNotification?.date ?? \"\"\r\n    forceGenerateNotifications(latestTimestamp)\r\n}\r\n\r\n// const notificationsAdapter = createEntityAdapter({\r\n//     sortComparer: (a, b) => b.date.localeCompare(a.date)\r\n// })\r\n\r\nconst notificationsAdapter = createEntityAdapter()\r\n\r\nconst matchNotificationsReceived = isAnyOf(\r\n    notificationsReceived,\r\n    extendedApi.endpoints.getNotifications.matchFulfilled\r\n)\r\n\r\n// export const fetchNotifications = createAsyncThunk(\r\n//     \"notifications/fetchNotifications\",\r\n//     async (_, { getState }) => {\r\n//         const allNotifications = selectAllNotifications(getState())\r\n//         const [latestNotification] = allNotifications\r\n//         const latestTimestamp = latestNotification ? latestNotification.date : \"\"\r\n//         const response = await client.get(`/fakeApi/notifications?since=${latestTimestamp}`)\r\n\r\n//         return response.data\r\n//     }\r\n// )\r\n\r\nconst notificationsSlice = createSlice({\r\n    name: \"notifications\",\r\n    initialState: notificationsAdapter.getInitialState(),\r\n    reducers: {\r\n        allNotificationsRead(state, action) {\r\n            // state.forEach(notification => {\r\n            //     notification.read = true\r\n            // })\r\n            Object.values(state.entities).forEach(notification => {\r\n                notification.read = true\r\n            })\r\n        }\r\n    },\r\n    extraReducers(builder) {\r\n        // builder.addCase(fetchNotifications.fulfilled, (state, action) => {\r\n        //     // state.push(...action.payload)\r\n        //     // state.forEach(notification => {\r\n        //     //     notification.isNew = !notification.read\r\n        //     // })\r\n        //     // state.sort((a, b) => b.date.localeCompare(a.date))\r\n        //     notificationsAdapter.upsertMany(state, action.payload)\r\n        //     Object.values(state.entities).forEach(notification => {\r\n        //         notification.isNew = !notification.read\r\n        //     })\r\n        // })\r\n        builder.addMatcher(matchNotificationsReceived, (state, action) => {\r\n            const notificationsMetadata = action.payload.map(notification => ({\r\n                id: notification.id,\r\n                read: false,\r\n                isNew: true\r\n            }))\r\n\r\n            Object.values(state.entities).forEach(notification => {\r\n                notification.isNew = !notification.read\r\n            })\r\n\r\n            notificationsAdapter.upsertMany(state, notificationsMetadata)\r\n        })\r\n    }\r\n})\r\n\r\nexport default notificationsSlice.reducer\r\n\r\nexport const { \r\n    //selectAll: selectAllNotifications \r\n    selectAll: selectNotificationsMetadata,\r\n    selectEntities: selectMetadataEntities\r\n} =\r\n  notificationsAdapter.getSelectors(state => state.notifications)\r\n\r\n// export const selectAllNotifications = state => state.notifications\r\n\r\nexport const { allNotificationsRead } = notificationsSlice.actions","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { fetchNotificationsWebsocket, selectNotificationsMetadata, useGetNotificationsQuery } from '../features/notifications/notificationsSlice'\n\nexport const Navbar = () => {\n\n  const dispatch = useDispatch()\n  useGetNotificationsQuery()\n  // const notification = useSelector(selectAllNotifications)\n  const notificationsMetadata = useSelector(selectNotificationsMetadata)\n  // const numUnreadNotifications = notification.filter(n => !n.read).length\n  const numUnreadNotifications = notificationsMetadata.filter(n => !n.read).length\n  const fetchNewNotifications = () => {\n    //dispatch(fetchNotifications())\n    dispatch(fetchNotificationsWebsocket())\n  }\n\n  let unreadNotificationsBadge\n\n  if (numUnreadNotifications > 0) {\n    unreadNotificationsBadge = (\n      <span className='badge'>{numUnreadNotifications}</span>\n    )\n  }\n\n  return (\n    <nav>\n      <section>\n        <h1>Redux Essentials Example</h1>\n\n        <div className=\"navContent\">\n          <div className=\"navLinks\">\n            <Link to=\"/\">Posts</Link>\n            <Link to=\"/users\">Users</Link>\n            <Link to=\"/notifications\">Notifications {unreadNotificationsBadge}</Link>\n          </div>\n          <button className=\"button\" onClick={fetchNewNotifications}>\n            Refresh Notifications\n          </button>\n        </div>\n      </section>\n    </nav>\n  )\n}\n","import { createEntityAdapter, createSelector } from '@reduxjs/toolkit'\r\n//import { client } from '../../api/client'\r\nimport { apiSlice } from '../api/apiSlice'\r\n\r\nconst usersAdapter = createEntityAdapter()\r\nconst initialState = usersAdapter.getInitialState()\r\n\r\n// export const fetchUsers = createAsyncThunk('users/fetchUsers', async () => {\r\n//     const response = await client.get('/fakeApi/users')\r\n//     return response.data\r\n// })\r\n\r\nexport const extendedApiSlice = apiSlice.injectEndpoints({\r\n    endpoints: builder => ({\r\n        getUsers: builder.query({\r\n            query: () => \"/users\",\r\n            transformResponse: responseData => {\r\n                return usersAdapter.setAll(initialState, responseData)\r\n            }\r\n        })\r\n    })\r\n})\r\n\r\nexport const { useGetUsersQuery } = extendedApiSlice\r\n\r\nexport const selectUsersResult = extendedApiSlice.endpoints.getUsers.select()\r\n\r\nconst selectUsersData = createSelector(\r\n    selectUsersResult,\r\n    usersResult => usersResult.data\r\n)\r\n\r\n//export const selectUsersResult = apiSlice.endpoints.getUsers.select()\r\n//const emptyUsers = []\r\n\r\n// export const selectAllUsers = createSelector(\r\n//     selectUsersResult,\r\n//     usersResult => usersResult?.data ?? emptyUsers\r\n// )\r\n\r\n// export const selectUserById = createSelector(\r\n//     selectAllUsers,\r\n//     (state, userId) => userId,\r\n//     (users, userId) => users.find(user => user.id === userId)\r\n// )\r\n\r\n\r\n// const usersSlice = createSlice({\r\n//     name: 'users',\r\n//     initialState,\r\n//     reducers: {},\r\n//     extraReducers(builder) {\r\n//         builder\r\n//             .addCase(fetchUsers.fulfilled, \r\n//                 // (state, action) => {return action.payload}\r\n//                 usersAdapter.setAll\r\n//                 )\r\n//     }\r\n// })\r\n\r\n// export const selectAllUsers = state => state.users\r\n\r\n// export const selectUserById = (state, userId) => state.users.find(user => user.id === userId)\r\n\r\n// export default usersSlice.reducer\r\n\r\nexport const { \r\n    selectAll: selectAllUsers, \r\n    selectById: selectUserById \r\n} = usersAdapter.getSelectors(state => selectUsersData(state) ?? initialState)","import React, { useLayoutEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { formatDistanceToNow, parseISO } from 'date-fns'\r\nimport classnames from 'classnames'\r\n\r\nimport { selectAllUsers } from '../users/usersSlice'\r\n\r\nimport { allNotificationsRead, useGetNotificationsQuery, selectMetadataEntities } from './notificationsSlice'\r\n\r\nexport const NotificationsList = () => {\r\n    const dispatch = useDispatch()\r\n    //const notifications = useSelector(selectAllNotifications)\r\n    const { data: notifications = [] } = useGetNotificationsQuery()\r\n    const notificationsMetadata = useSelector(selectMetadataEntities)\r\n    const users = useSelector(selectAllUsers)\r\n\r\n    useLayoutEffect(() => {\r\n        dispatch(allNotificationsRead())\r\n    })\r\n\r\n    const renderedNotifications = notifications.map(notification => {\r\n        const date = parseISO(notification.date)\r\n        const timeAgo = formatDistanceToNow(date)\r\n        const user = users.find(user => user.id === notification.user) || {\r\n            name: 'Unknown User'\r\n        }\r\n\r\n        const metadata = notificationsMetadata[notification.id]\r\n\r\n        const notificationClassname = classnames(\"notification\", {\r\n            //new: notification.isNew\r\n            new: metadata.isNew\r\n        })\r\n\r\n        return (\r\n            <div key={notification.id} className={notificationClassname}>\r\n                <div>\r\n                    <b>{user.name}</b> {notification.message}\r\n                </div>\r\n                <div title={notification.date}>\r\n                    <i>{timeAgo} ago</i>\r\n                </div>\r\n            </div>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <section className=\"notificationsList\">\r\n            <h2>Notifications</h2>\r\n            {renderedNotifications}\r\n        </section>\r\n    )\r\n}","import React, { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n//import { addNewPost } from \"./postsSlice\";\r\nimport { selectAllUsers } from \"../users/usersSlice\";\r\nimport { useAddNewPostMutation } from \"../api/apiSlice\";\r\n\r\nexport const AddPostForm = () => {\r\n    const [title, setTitle] = useState(\"\");\r\n    const [content, setContent] = useState(\"\");\r\n    const [userId, setUserId] = useState(\"\");\r\n    //const [addRequestStatus, setAddRequestStatus] = useState(\"idle\");\r\n\r\n    //const dispatch = useDispatch();\r\n\r\n    const [addNewPost, { isLoading }] = useAddNewPostMutation();\r\n    const users = useSelector(selectAllUsers);\r\n\r\n    const onTitleChanged = e => setTitle(e.target.value);\r\n    const onContentChanged = e => setContent(e.target.value);\r\n    const onAuthorChanged = e => setUserId(e.target.value);\r\n\r\n\r\n    const onSavePostClicked = async () => {\r\n        if (canSave) {\r\n            try {\r\n                await addNewPost({title, content, user: userId}).unwrap()\r\n                // setAddRequestStatus('pending')\r\n                // await dispatch(addNewPost({ title, content, user: userId })).unwrap()\r\n                setTitle('')\r\n                setContent('')\r\n                setUserId('')\r\n            } catch (err) {\r\n                console.error('Failed to save the post: ', err)\r\n            // } finally {\r\n            //     setAddRequestStatus('idle')\r\n            }\r\n        }\r\n    }\r\n\r\n    //const canSave = [title, content, userId].every(Boolean) && addRequestStatus === \"idle\";\r\n    const canSave = [title, content, userId].every(Boolean) && !isLoading;\r\n\r\n    const usersOptions = users.map(user => (\r\n        <option key={user.id} value={user.id}>\r\n            {user.name}\r\n        </option>\r\n    ))\r\n\r\n    return (\r\n        <section>\r\n            <h2>Add a New Post</h2>\r\n            <form>\r\n                <label htmlFor=\"postTitle\">Post Title:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"postTitle\"\r\n                    name=\"postTitle\"\r\n                    placeholder=\"What's on your mind?\"\r\n                    value={title}\r\n                    onChange={onTitleChanged}\r\n                />\r\n\r\n                <label htmlFor=\"postAuthor\">Author:</label>\r\n                <select id=\"postAuthor\" value={userId} onChange={onAuthorChanged}>\r\n                    <option value=\"\"></option>\r\n                    {usersOptions}\r\n                </select>\r\n\r\n                <label htmlFor=\"postContent\">Content:</label>\r\n                <textarea\r\n                    id=\"postContent\"\r\n                    name=\"postContent\"\r\n                    value={content}\r\n                    onChange={onContentChanged}\r\n                />\r\n                <button type=\"button\" onClick={onSavePostClicked} disabled={!canSave}>Save Post</button>\r\n            </form>\r\n        </section>\r\n    )\r\n}","import React, { useState } from \"react\";\r\n//import { Spinner } from \"../../components/Spinner\";\r\n//import { useDispatch } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n//import { postUpdated, selectPostById } from \"./postsSlice\";\r\n\r\nimport { useGetPostQuery, useEditPostMutation } from \"../api/apiSlice\"\r\n\r\nexport const EditPostForm = ({ match }) => {\r\n    const { postId } = match.params\r\n\r\n    //const post = useSelector(state => selectPostById(state, postId))\r\n\r\n    const { data: post } = useGetPostQuery(postId)\r\n    const [updatePost] = useEditPostMutation()\r\n\r\n    const [title, setTitle] = useState(post.title)\r\n    const [content, setContent] = useState(post.content)\r\n\r\n    //const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    const onTitleChanged = e => setTitle(e.target.value)\r\n    const onContentChanged = e => setContent(e.target.value)\r\n\r\n    const onSavePostClicked = async () => {\r\n        if (title && content) {\r\n            //dispatch(postUpdated({id: postId, title, content}))\r\n            await updatePost({ id: postId, title, content })\r\n            history.push(`/posts/${postId}`)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <section>\r\n          <h2>Edit Post</h2>\r\n          <form>\r\n            <label htmlFor=\"postTitle\">Post Title:</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"postTitle\"\r\n              name=\"postTitle\"\r\n              placeholder=\"What's on your mind?\"\r\n              value={title}\r\n              onChange={onTitleChanged}\r\n            />\r\n            <label htmlFor=\"postContent\">Content:</label>\r\n            <textarea\r\n              id=\"postContent\"\r\n              name=\"postContent\"\r\n              value={content}\r\n              onChange={onContentChanged}\r\n            />\r\n          </form>\r\n          <button type=\"button\" onClick={onSavePostClicked}>\r\n            Save Post\r\n          </button>\r\n        </section>\r\n      )\r\n}","import React from 'react'\n\nexport const Spinner = ({ text = '', size = '5em' }) => {\n  const header = text ? <h4>{text}</h4> : null\n  return (\n    <div className=\"spinner\">\n      {header}\n      <div className=\"loader\" style={{ height: size, width: size }} />\n    </div>\n  )\n}\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectUserById } from '../users/usersSlice'\r\n\r\nexport const PostAuthor = ({ userId }) => {\r\n  const author = useSelector(state => selectUserById(state, userId)\r\n  )\r\n\r\n  return <span>by {author ? author.name : 'Unknown author'}</span>\r\n}","import React from 'react'\r\nimport { parseISO, formatDistanceToNow } from 'date-fns'\r\n\r\nexport const TimeAgo = ({ timestamp }) => {\r\n  let timeAgo = ''\r\n  if (timestamp) {\r\n    const date = parseISO(timestamp)\r\n    const timePeriod = formatDistanceToNow(date)\r\n    timeAgo = `${timePeriod} ago`\r\n  }\r\n\r\n  return (\r\n    <span title={timestamp}>\r\n      &nbsp; <i>{timeAgo}</i>\r\n    </span>\r\n  )\r\n}","import React from 'react'\r\nimport { useAddReactionMutation } from '../api/apiSlice'\r\n//import { useDispatch } from 'react-redux'\r\n\r\n//import { reactionAdded } from './postsSlice'\r\n\r\nconst reactionEmoji = {\r\n    thumbsUp: '👍',\r\n    hooray: '🎉',\r\n    heart: '❤️',\r\n    rocket: '🚀',\r\n    eyes: '👀'\r\n}\r\n\r\nexport const ReactionButtons = ({ post }) => {\r\n    // const dispatch = useDispatch()\r\n\r\n    const [addReaction] = useAddReactionMutation()\r\n\r\n    const reactionButtons = Object.entries(reactionEmoji).map(([reactionName, emoji]) => {\r\n        return (\r\n            <button key={reactionName} type=\"button\" className=\"muted-button reaction-button\" \r\n            onClick={() => {\r\n            // dispatch(reactionAdded({ postId: post.id, reaction: name }))\r\n                addReaction({ postId: post.id, reaction: reactionName })\r\n            }}>\r\n                {emoji} {post.reactions[reactionName]}\r\n            </button>\r\n        )\r\n    })\r\n\r\n    return <div>{reactionButtons}</div>\r\n}","import React, { useMemo } from \"react\";\r\n//import { useSelector, useDispatch } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { Spinner } from \"../../components/Spinner\"\r\nimport { PostAuthor } from \"./PostAuthor\";\r\nimport { TimeAgo } from \"./TimeAgo\";\r\nimport { ReactionButtons } from \"./ReactionButtons\";\r\n// import { fetchPosts, selectPostById, selectPostIds } from \"./postsSlice\";\r\nimport { useGetPostsQuery } from \"../api/apiSlice\";\r\n\r\nimport classNames from \"classnames\";\r\n\r\nlet PostExcerpt = ({ post }) => {\r\n    return (\r\n        <article className=\"post-excerpt\" key={post.id}>\r\n            <h3>{post.title}</h3>\r\n            <div>\r\n                <PostAuthor userId={post.user} />\r\n                <TimeAgo timestamp={post.date} />\r\n            </div>\r\n            <p className=\"post-content\">{post.content.substring(0, 100)}</p>\r\n            <ReactionButtons post={post} />\r\n            <Link to={`/posts/${post.id}`} className=\"button muted-button\">\r\n                View Post\r\n            </Link>\r\n        </article>\r\n    )\r\n}\r\n\r\n// PostExcerpt = React.memo(PostExcerpt)\r\n\r\nexport const PostsList = () => {\r\n\r\n    // const dispatch = useDispatch()\r\n\r\n    // const orderedPostIds = useSelector(selectPostIds)\r\n\r\n    // const postStatus = useSelector(state => state.posts.status)\r\n    // const error = useSelector(state => state.posts.error)\r\n\r\n    // useEffect(() => {\r\n    //     if (postStatus === \"idle\") {\r\n    //         dispatch(fetchPosts())\r\n    //     }\r\n    // }, [postStatus, dispatch])\r\n\r\n    const {\r\n        data: posts = [],\r\n        isLoading,\r\n        isSuccess,\r\n        isFetching,\r\n        isError,\r\n        error,\r\n        refetch\r\n    } = useGetPostsQuery()\r\n\r\n    const sortedPosts = useMemo(() => {\r\n        const sortedPosts = posts.slice()\r\n        sortedPosts.sort((a, b) => b.date.localeCompare(a.date))\r\n        return sortedPosts\r\n    }, [posts])\r\n\r\n    let content\r\n\r\n    // if (postStatus === \"loading\") {\r\n    //     content = <Spinner text=\"Loading...\" />\r\n    // } else if (postStatus === \"succeeded\") {\r\n    //     content = orderedPostIds.map(postId => (\r\n    //         <PostExcerpt key={postId} postId={postId} />\r\n    //     ))\r\n    // } else if (postStatus === \"failed\") {\r\n    //     content = <div>{error}</div>\r\n    // }\r\n\r\n    if (isLoading) {\r\n        content = <Spinner text=\"Loading...\" />\r\n    } else if (isSuccess) {\r\n        const renderedPosts = sortedPosts.map(post => <PostExcerpt key={post.id} post={post} />)\r\n        const containerClassname = classNames(\"posts-container\", {\r\n            disabled: isFetching\r\n        })\r\n        content = <div className={containerClassname}>{renderedPosts}</div>\r\n    } else if (isError) {\r\n        content = <div>{error.toString()}</div>\r\n    }\r\n\r\n\r\n    return (\r\n        <section className=\"posts-list\">\r\n            <h2>Posts</h2>\r\n            <button onClick={refetch}>Refetch Posts</button>\r\n            {content}\r\n        </section>\r\n    )\r\n}","import React from \"react\";\r\n// import { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { PostAuthor } from \"./PostAuthor\";\r\n// import { selectPostById } from \"./postsSlice\";\r\nimport { ReactionButtons } from \"./ReactionButtons\";\r\nimport { TimeAgo } from \"./TimeAgo\";\r\nimport { Spinner } from \"../../components/Spinner\";\r\nimport { useGetPostQuery } from \"../api/apiSlice\";\r\n\r\nexport const SinglePostPage = ({ match }) => {\r\n    const { postId } = match.params;\r\n\r\n    // const post = useSelector(state => selectPostById(state, postId))\r\n\r\n    // if (!post) {\r\n    //     return (\r\n    //         <section>\r\n    //             <h2>Post not found!</h2>\r\n    //         </section>\r\n    //     )\r\n    // }\r\n\r\n    // return (\r\n    //     <section>\r\n    //         <article className=\"post\">\r\n    //             <h2>{post.title}</h2>\r\n    //             <div>\r\n    //                 <PostAuthor userId={post.user} />\r\n    //                 <TimeAgo timestamp={post.date} />\r\n    //             </div>\r\n    //             <p className=\"post-content\">{post.content}</p>\r\n    //             <ReactionButtons post={post} />\r\n    //             <Link to={`/editPost/${post.id}`} className=\"button\">Edit Post</Link>\r\n    //         </article>\r\n    //     </section>\r\n    // )\r\n\r\n    const {\r\n        data: post,\r\n        isFetching,\r\n        isSuccess\r\n    } = useGetPostQuery(postId)\r\n\r\n    let content\r\n\r\n    if (isFetching) {\r\n        content = <Spinner text=\"Loading...\" />\r\n    } else if (isSuccess) {\r\n        content = (\r\n            <article className=\"post\">\r\n                <h2>{post.title}</h2>\r\n                <div>\r\n                    <PostAuthor userId={post.user} />\r\n                    <TimeAgo timestamp={post.date} />\r\n                </div>\r\n                <p className=\"post-content\">{post.content}</p>\r\n                <ReactionButtons post={post} />\r\n                <Link to={`/editPost/${post.id}`} className=\"button\">\r\n                    Edit Post\r\n                </Link>\r\n            </article>\r\n        )\r\n    }\r\n\r\n    return <section>{content}</section>\r\n}","import React, { useMemo } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { selectUserById } from \"./usersSlice\";\r\n//import { selectPostsByUser } from \"../posts/postsSlice\";\r\nimport { createSelector } from \"@reduxjs/toolkit\";\r\nimport { useGetPostsQuery } from \"../api/apiSlice\";\r\n\r\nexport const UserPage = ({ match }) => {\r\n    const { userId } = match.params\r\n\r\n    const user = useSelector(state => selectUserById(state, userId))\r\n\r\n    const selectPostsForUser = useMemo(() => {\r\n        const emptyArray = []\r\n        return createSelector(\r\n            res => res.data,\r\n            (res, userId) => userId,\r\n            (data, userId) => data?.filter(post => post.user === userId) ?? emptyArray\r\n        )\r\n    }, [])\r\n\r\n    //const postsForUser = useSelector(state => selectPostsByUser(state, userId))\r\n\r\n    const { postsForUser } = useGetPostsQuery(undefined, {\r\n        selectFromResult: result => ({\r\n            ...result,\r\n            postsForUser: selectPostsForUser(result, userId)\r\n        })\r\n    })\r\n\r\n    const postTitles = postsForUser.map(post => (\r\n        <li key={post.id}>\r\n            <Link to={`/posts/${post.id}`}>{post.title}</Link>\r\n        </li>\r\n    ))\r\n\r\n    return (\r\n        <section>\r\n            <h2>{user.name}</h2>\r\n            <ul>{postTitles}</ul>\r\n        </section>\r\n    )\r\n}","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { selectAllUsers } from \"./usersSlice\";\r\n\r\nexport const UsersList = () => {\r\n    const users = useSelector(selectAllUsers)\r\n\r\n    const renderedUsers = users.map(user => (\r\n        <li key={user.id}>\r\n            <Link to={`/users/${user.id}`}>{user.name}</Link>\r\n        </li>\r\n    ))\r\n\r\n    return (\r\n        <section>\r\n            <h2>Users</h2>\r\n            <ul>{renderedUsers}</ul>\r\n        </section>\r\n    )\r\n}","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom'\n\nimport { Navbar } from './app/Navbar'\nimport { NotificationsList } from './features/notifications/NotificationsList'\nimport { AddPostForm } from './features/posts/AddPostForm'\nimport { EditPostForm } from './features/posts/EditPostForm'\nimport { PostsList } from './features/posts/PostsList'\nimport { SinglePostPage } from './features/posts/SinglePostPage'\nimport { UserPage } from './features/users/UserPage'\nimport { UsersList } from './features/users/UsersList'\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <div className=\"App\">\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <React.Fragment>\n                <AddPostForm />\n                <PostsList />\n              </React.Fragment>\n            )}\n          />\n          <Route exact path=\"/posts/:postId\" component={SinglePostPage} />\n          <Route exact path=\"/editPost/:postId\" component={EditPostForm} />\n          <Route exact path=\"/users\" component={UsersList} />\n          <Route exact path=\"/users/:userId\" component={UserPage} />\n          <Route exact path=\"/notifications\" component={NotificationsList} />\n          <Redirect to=\"/\" />\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","// A tiny wrapper around fetch(), borrowed from\n// https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper\n\nexport async function client(endpoint, { body, ...customConfig } = {}) {\n  const headers = { 'Content-Type': 'application/json' }\n\n  const config = {\n    method: body ? 'POST' : 'GET',\n    ...customConfig,\n    headers: {\n      ...headers,\n      ...customConfig.headers,\n    },\n  }\n\n  if (body) {\n    config.body = JSON.stringify(body)\n  }\n\n  let data\n  try {\n    const response = await window.fetch(endpoint, config)\n    data = await response.json()\n    if (response.ok) {\n      // Return a result object similar to Axios\n      return {\n        status: response.status,\n        data,\n        headers: response.headers,\n        url: response.url,\n      }\n    }\n    throw new Error(response.statusText)\n  } catch (err) {\n    return Promise.reject(err.message ? err.message : data)\n  }\n}\n\nclient.get = function (endpoint, customConfig = {}) {\n  return client(endpoint, { ...customConfig, method: 'GET' })\n}\n\nclient.post = function (endpoint, body, customConfig = {}) {\n  return client(endpoint, { ...customConfig, body })\n}\n","import { createSlice, nanoid, createAsyncThunk, createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\r\nimport { client } from \"../../api/client\";\r\n\r\nconst postsAdapter = createEntityAdapter({\r\n    sortComparer: (a, b) => b.date.localeCompare(a.date)\r\n})\r\n\r\nconst initialState = postsAdapter.getInitialState({\r\n    status: 'idle',\r\n    error: null\r\n  })\r\n\r\n// const initialState = {\r\n//     posts: [],\r\n//     status: \"idle\",\r\n//     error: null\r\n// }\r\n\r\nexport const fetchPosts = createAsyncThunk(\"posts/fetchPosts\", async () => {\r\n    const response = await client.get(\"/fakeApi/posts\")\r\n    return response.data\r\n})\r\n\r\nexport const addNewPost = createAsyncThunk(\r\n    \"posts/addNewPost\",\r\n    async initialPost => {\r\n        const response = await client.post(\"/fakeApi/posts\", initialPost)\r\n        return response.data\r\n    }\r\n)\r\n\r\nconst postsSlice = createSlice({\r\n    name: \"posts\",\r\n    initialState,\r\n    reducers: {\r\n        postAdded: {\r\n            reducer(state, action) {\r\n                state.posts.push(action.payload)\r\n            },\r\n            prepare(title, content, userId) {\r\n                return {\r\n                    payload: {\r\n                        id: nanoid(),\r\n                        date: new Date().toISOString(),\r\n                        title,\r\n                        content,\r\n                        user: userId,\r\n                        reactions: {\r\n                            thumbsUp: 0,\r\n                            hooray: 0,\r\n                            heart: 0,\r\n                            rocket: 0,\r\n                            eyes: 0,\r\n                        },\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        reactionAdded(state, action) {\r\n            const { postId, reaction } = action.payload\r\n            const existingPost = state.entities[postId]\r\n            if (existingPost) {\r\n                existingPost.reactions[reaction]++\r\n            }\r\n        },\r\n\r\n        postUpdated(state, action) {\r\n            const { id, title, content } = action.payload\r\n            const existingPost = state.entities[id]\r\n            if (existingPost) {\r\n                existingPost.title = title\r\n                existingPost.content = content\r\n            }\r\n        }\r\n    },\r\n\r\n    extraReducers(builder) {\r\n        builder\r\n            .addCase(fetchPosts.pending, (state, action) => {\r\n                state.status = \"loading\"\r\n            })\r\n            .addCase(fetchPosts.fulfilled, (state, action) => {\r\n                state.status = \"succeeded\"\r\n                // state.posts = state.posts.concat(action.payload)\r\n                postsAdapter.upsertMany(state, action.payload)\r\n            })\r\n            .addCase(fetchPosts.rejected, (state, action) => {\r\n                state.status = \"failed\"\r\n                state.error = action.error.message\r\n            })\r\n            .addCase(addNewPost.fulfilled, \r\n            //     (state, action) => {\r\n            //     state.posts.push(action.payload)\r\n            // }\r\n            postsAdapter.addOne\r\n            )\r\n\r\n    }\r\n})\r\n\r\nexport const { postAdded, postUpdated, reactionAdded } = postsSlice.actions;\r\n\r\nexport default postsSlice.reducer;\r\n\r\nexport const {\r\n    selectAll: selectAllPosts,\r\n    selectById: selectPostById,\r\n    selectIds: selectPostIds\r\n} = postsAdapter.getSelectors(state => state.posts)\r\n\r\n// export const selectAllPosts = state => state.posts.posts;\r\n\r\n// export const selectPostById = (state, postId) => state.posts.posts.find(post => post.id === postId);\r\n\r\nexport const selectPostsByUser = createSelector(\r\n    [selectAllPosts, (state, userId) => userId],\r\n    (posts, userId) => posts.filter(post => post.user === userId)\r\n)","import { configureStore } from '@reduxjs/toolkit'\nimport postsReducer from '../features/posts/postsSlice'\n//import usersReducer from '../features/users/usersSlice'\nimport notificationsReducer from '../features/notifications/notificationsSlice'\nimport { apiSlice } from '../features/api/apiSlice'\n\nexport default configureStore({\n  reducer: {\n    posts: postsReducer,\n    //users: usersReducer,\n    notifications: notificationsReducer,\n    [apiSlice.reducerPath]: apiSlice.reducer\n  },\n  middleware: getDefaultMiddleware => \n    getDefaultMiddleware().concat(apiSlice.middleware),\n  devTools: true,\n})\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport store from './app/store'\nimport { Provider } from 'react-redux'\n\nimport { worker } from './api/server'\nimport { extendedApiSlice } from './features/users/usersSlice'\n// import { fetchUsers } from './features/users/usersSlice'\n//import { apiSlice } from './features/api/apiSlice'\n\n\n// Wrap app rendering so we can wait for the mock API to initialize\nasync function main() {\n  // Start our mock API server\n  await worker.start({ onUnhandledRequest: 'bypass' })\n\n  // store.dispatch(fetchUsers())\n  //store.dispatch(apiSlice.endpoints.getUsers.initiate())\n  store.dispatch(extendedApiSlice.endpoints.getUsers.initiate())\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n  )\n}\n\nmain()\n"],"sourceRoot":""}